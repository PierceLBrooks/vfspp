# - Try to find VFSPP
# Once done this will define
#
# Read-Only variables
#  VFSPP_FOUND - system has VFSPP
#  VFSPP_INCLUDE_DIR - the VFSPP include directory
#  VFSPP_LIBRARY_DIR - the VFSPP library directory
#  VFSPP_LIBRARIES - Link these to use VFSPP
#  VFSPP_LIBRARY - path to VFSPP library
#
# Hint
#  VFSPP_ROOT_DIR can be pointed to a local VFSPP installation.

SET(_VFSPP_ROOT_HINTS
    ${VFSPP_ROOT_DIR}
    ENV VFSPP_ROOT_DIR
)

SET(_VFSPP_ROOT_HINTS_AND_PATHS
    HINTS ${_VFSPP_ROOT_HINTS}
    PATHS ${_VFSPP_ROOT_PATHS}
)

FIND_PATH(VFSPP_INCLUDE_DIR
    NAMES VFS.h
    ${_VFSPP_ROOT_HINTS_AND_PATHS}
    PATH_SUFFIXES include
)

IF(VFSPP_INCLUDE_DIR AND VFSPP_LIBRARIES)
    # Already in cache, be silent
    SET(VFSPP_FIND_QUIETLY TRUE)
ENDIF()

FIND_LIBRARY(VFSPP_LIBRARY
    NAMES vfspp libvfspp
    ${_VFSPP_ROOT_HINTS_AND_PATHS}
    PATH_SUFFIXES lib
)

IF(VFSPP_INCLUDE_DIR AND VFSPP_LIBRARY)
     SET(VFSPP_FOUND TRUE)
ENDIF()

IF(VFSPP_FOUND)
    #Â split VFSPP into -L and -l linker options, so we can set them for pkg-config
    GET_FILENAME_COMPONENT(VFSPP_LIBRARY_DIR ${VFSPP_LIBRARY} PATH)
    GET_FILENAME_COMPONENT(VFSPP_LIBRARY_FILE ${VFSPP_LIBRARY} NAME_WE)
    STRING(REGEX REPLACE "^lib" "" VFSPP_LIBRARY_FILE ${VFSPP_LIBRARY_FILE})
    SET(VFSPP_LIBRARIES "-L${VFSPP_LIBRARY_DIR} -l${VFSPP_LIBRARY_FILE}")

    IF(NOT VFSPP_FIND_QUIETLY)
        MESSAGE(STATUS "Found VFSPP:")
        MESSAGE(STATUS "  VFSPP: ${VFSPP_LIBRARY}")
    ENDIF(NOT VFSPP_FIND_QUIETLY)
ELSE(VFSPP_FOUND)
    IF(VFSPP_FIND_REQUIRED)
        MESSAGE(FATAL_ERROR "Could not find VFSPP")
    ENDIF(VFSPP_FIND_REQUIRED)
ENDIF(VFSPP_FOUND)

MARK_AS_ADVANCED(
    VFSPP_INCLUDE_DIR
    VFSPP_LIBRARY_DIR
    VFSPP_LIBRARIES
    VFSPP_LIBRARY
)

ADD_FEATURE_INFO(VFSPP VFSPP_FOUND "virtual file system support")
